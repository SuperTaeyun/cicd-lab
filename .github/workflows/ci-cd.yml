name: CI-CD to EKS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  EKS_CLUSTER_NAME: demo-eks
  ECR_REPOSITORY: demo-app
  K8S_NAMESPACE: demo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC AssumeRole)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I (for debug)
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker Image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t ${ECR_URI}:${IMAGE_TAG} -t ${ECR_URI}:latest .
          docker push ${ECR_URI}:${IMAGE_TAG}
          docker push ${ECR_URI}:latest
          echo "ECR_URI=${ECR_URI}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION}

      - name: Ensure namespace exists (idempotent)
        run: |
          kubectl get ns ${K8S_NAMESPACE} >/dev/null 2>&1 || kubectl create ns ${K8S_NAMESPACE}

      - name: Set image & apply
        run: |
          sed -i "s|851725405727.dkr.ecr.ap-northeast-2.amazonaws.com/demo-app|${ECR_URI}|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl set image deployment/demo-app demo-app=${ECR_URI}:${IMAGE_TAG} -n ${K8S_NAMESPACE}
          kubectl rollout status deployment/demo-app -n ${K8S_NAMESPACE}
